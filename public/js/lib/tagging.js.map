{"version":3,"sources":["tagging.js"],"names":[],"mappingsfile":"tagging.js","sourcesContent":["// taggingJS v1.3.3\r\n//    2014-10-24\r\n\r\n// Copyright (c) 2014 Fabrizio Fallico\r\n\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n\r\n// The above copyright notice and this permission notice shall be included in\r\n//  all copies or substantial portions of the Software.\r\n\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n(function( $, window, document, undefined ) {\r\n\r\n    /**\r\n     * taggingJS Constructor\r\n     *\r\n     * @param obj elem     DOM object of tag box\r\n     * @param obj options  Custom JS options\r\n     */\r\n    var Tagging = function( elem, options ) {\r\n        this.elem    = elem;          // The tag box\r\n        this.$elem   = $( elem );     // jQuerify tag box\r\n        this.options = options;       // JS custom options\r\n        this.tags = [];               // Here we store all tags\r\n        // this.$type_zone = void 0;  // The tag box's input zone\r\n    };\r\n\r\n    /**\r\n     * taggingJS Prototype\r\n     */\r\n    Tagging.prototype = {\r\n\r\n\r\n        // All special Keys\r\n        keys: {\r\n            // Special keys to add a tag\r\n            add: {\r\n                comma:    188,\r\n                enter:    13,\r\n                spacebar: 32,\r\n            },\r\n\r\n            // Special keys to remove last tag\r\n            remove: {\r\n                del: 46,\r\n                backspace: 8,\r\n            }\r\n        },\r\n\r\n        // Default options value\r\n        defaults: {\r\n            \"case-sensitive\": false,                        // True to allow differences between lowercase and uppercase\r\n            \"close-char\": \"&times;\",                        // Single Tag close char\r\n            \"close-class\": \"tag-i\",                         // Single Tag close class\r\n            \"edit-on-delete\": true,                         // True to edit tag that has just been removed from tag box\r\n            \"forbidden-chars\": [ \".\", \"_\", \"?\" ],           // Array of forbidden characters\r\n            \"forbidden-chars-callback\": window.alert,       // Function to call when there is a forbidden chars\r\n            \"forbidden-chars-text\": \"Forbidden character:\", // Basic text passed to forbidden-chars callback\r\n            \"forbidden-words\": [],                          // Array of forbidden words\r\n            \"forbidden-words-callback\": window.alert,       // Function to call when there is a forbidden words\r\n            \"forbidden-words-text\": \"Forbidden word:\",      // Basic text passed to forbidden-words callback\r\n            \"no-backspace\": false,                          // Backspace key remove last tag, true to avoid that\r\n            \"no-comma\": false,                              // Comma \",\" key add a new tag, true to avoid that\r\n            \"no-del\": false,                                // Delete key remove last tag, true to avoid that\r\n            \"no-duplicate\": true,                           // No duplicate in tag box\r\n            \"no-duplicate-callback\": window.alert,          // Function to call when there is a duplicate tag\r\n            \"no-duplicate-text\": \"Duplicate tag:\",          // Basic text passed to no-duplicate callback\r\n            \"no-enter\": false,                              // Enter key add a new tag, true to avoid that\r\n            \"no-spacebar\": false,                           // Spacebar key add a new tag by default, true to avoid that\r\n            \"pre-tags-separator\": \", \",                     // By default, you must put new tags using a new line\r\n            \"tag-box-class\": \"tagging\",                     // Class of the tag box\r\n            \"tag-char\": \"#\",                                // Single Tag char\r\n            \"tag-class\": \"tag\",                             // Single Tag class\r\n            \"tags-input-name\": \"tag\",                       // Name to use as name=\"\" in single tags (by default tag[])\r\n            \"tag-on-blur\": true,                            // Add the current tag if user clicks away from type-zone\r\n            \"type-zone-class\": \"type-zone\",                 // Class of the type-zone\r\n        },\r\n\r\n        /**\r\n         * Add a tag\r\n         *\r\n         * @param string            text  Text to add as tag, if null we get the content of tag box type_zone.\r\n         * @return boolean|funtion        true if OK; false if NO; function with some config error.\r\n         */\r\n        add: function( text ) {\r\n\r\n            // console.log( 'add' );\r\n\r\n            var $tag, l, self,\r\n                index, forbidden_words,\r\n                callback_f, callback_t;\r\n\r\n            // Caching this\r\n            self = this;\r\n\r\n            // If text is an array, call add on each element\r\n            if ( $.isArray( text ) ) {\r\n                // Adding text present on type_zone as tag on first call\r\n                return $.each( text, function() {\r\n                    self.add( this + \"\" );\r\n                });\r\n            }\r\n\r\n            // Forbidden Words shortcut\r\n            forbidden_words = self.config[ \"forbidden-words\" ];\r\n\r\n            // If no text is passed, take it as text of $type_zone and then empty it\r\n            if ( ! text ) {\r\n                text = self.valInput();\r\n                self.emptyInput();\r\n            }\r\n\r\n            // If text is empty too, then go out\r\n            if ( ! text || ! text.length ) {\r\n                return false;\r\n            }\r\n\r\n            // If case-sensitive is true, write everything in lowercase\r\n            if ( ! self.config[ \"case-sensitive\" ] ) {\r\n                text = text.toLowerCase();\r\n            }\r\n\r\n            // Checking if text is a Forbidden Word\r\n            l = forbidden_words.length;\r\n            while ( l-- ) {\r\n\r\n                // Looking for a forbidden words\r\n                index = text.indexOf( forbidden_words[ l ] );\r\n\r\n                // There is a forbidden word\r\n                if ( index >= 0 ) {\r\n\r\n                    // Removing all text and ','\r\n                    self.emptyInput();\r\n\r\n                    // Renaiming\r\n                    callback_f = self.config[ \"forbidden-words-callback\" ];\r\n                    callback_t = self.config[ \"forbidden-words-text\" ];\r\n\r\n                    // Remove as a duplicate\r\n                    return self.throwError( callback_f, callback_t, text );\r\n                }\r\n            }\r\n\r\n            // If no-duplicate is true, check that the text is not already present\r\n            if ( self.config[ \"no-duplicate\" ] ) {\r\n\r\n                // Looking for each text inside tags\r\n                l = self.tags.length;\r\n                while ( l-- ) {\r\n                    if ( self.tags[ l ].pure_text === text ) {\r\n\r\n                        // Removing all text and ','\r\n                        self.emptyInput();\r\n\r\n                        // Renaiming\r\n                        callback_f = self.config[ \"no-duplicate-callback\" ];\r\n                        callback_t = self.config[ \"no-duplicate-text\" ];\r\n\r\n                        // Remove the duplicate\r\n                        return self.throwError( callback_f, callback_t, text );\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Creating a new div for the new tag\r\n            $tag = $( document.createElement( \"div\" ) )\r\n                        .addClass( self.config[ \"tag-class\" ] )\r\n                        .html(  \"<span>\" + self.config[ \"tag-char\" ] + \"</span> \" + text  );\r\n\r\n            // Creating and Appending hidden input\r\n            $( document.createElement( \"input\" ) )\r\n                .attr( \"type\", \"hidden\" )\r\n                // custom input name\r\n                .attr( \"name\", self.config[ \"tags-input-name\" ] + \"[]\" )\r\n                .val( text )\r\n                .appendTo( $tag );\r\n\r\n            // Creating and tag button (with \"x\" to remove tag)\r\n            $( document.createElement( \"a\" ) )\r\n                .attr( \"role\", \"button\" )\r\n                // adding custom class\r\n                .addClass( self.config[ \"close-class\" ] )\r\n                // using custom char\r\n                .html( self.config[ \"close-char\" ] )\r\n                // click addEventListener\r\n                .click(function() {\r\n                    self.remove( $tag );\r\n                })\r\n                // finally append close button to tag element\r\n                .appendTo( $tag );\r\n\r\n            // Adding pure_text and position property to $tag\r\n            $tag.pure_text = text;\r\n\r\n            // Adding to tags the new tag (as jQuery Object)\r\n            self.tags.push( $tag );\r\n\r\n            // Adding tag in the type zone\r\n            self.$type_zone.before( $tag );\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Add a special keys\r\n         *\r\n         * @param  array       arr  Array like ['type', obj], where 'type' is 'add' or 'remove', obj is { key_name: key_num }\r\n         * @return string|obj       Error message or actually 'type'_key (add_key or remove_key).\r\n         */\r\n        addSpecialKeys: function( arr ) {\r\n            // console.log( 'addSpecialKeys' );\r\n\r\n            var self, value, to_add, obj, type;\r\n\r\n            self   = this;\r\n            type   = arr[0];\r\n            obj    = arr[1];\r\n            to_add = {};\r\n\r\n            // If obj is an array, call addSpecialKeys on each element\r\n            if ( $.isArray( obj ) ) {\r\n                return $.each( obj, function() {\r\n                    self.addSpecialKeys( [ type, this ] );\r\n                });\r\n            }\r\n\r\n            // Check if obj is really an object\r\n            // @link http://stackoverflow.com/a/16608045\r\n            if ( ( ! obj ) && ( obj.constructor !== Object ) ) {\r\n                return \"Error -> The second argument is not an Object!\";\r\n            }\r\n\r\n            for ( value in obj ) {\r\n                if ( obj.hasOwnProperty( value ) ) {\r\n                    // @link stackoverflow.com/a/3885844\r\n                    if ( obj[ value ] === +obj[ value ] && obj[ value ] === ( obj[ value ]|0 ) ) {\r\n                        $.extend( to_add, obj );\r\n                    }\r\n                }\r\n            }\r\n\r\n            self.keys[ type ] = $.extend( {}, to_add, self.keys[ type ] );\r\n\r\n            return self.keys[ type ];\r\n        },\r\n\r\n        /**\r\n         * Opposite of init, remove type_zone, all tags and other things.\r\n         *\r\n         * @return boolean\r\n         */\r\n        destroy: function() {\r\n            // console.log( 'destroy' );\r\n\r\n            // Removing the type-zone\r\n            this.$elem.find( \".\" + this.config[ \"type-zone-class\" ] ).remove();\r\n\r\n            // Removing all tags\r\n            this.$elem.find( \".\" + this.config[ \"tag-class\" ] ).remove();\r\n\r\n            // Destroy tag-box parameters\r\n            this.$elem.data( \"tag-box\", null );\r\n\r\n            // Exit with success\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Empty tag box's type_zone\r\n         *\r\n         * @return $_obj       The type_zone itself\r\n         */\r\n        emptyInput: function() {\r\n            // console.log( 'emptyInput' );\r\n\r\n            this.focusInput();\r\n\r\n            return this.valInput( \"\" );\r\n        },\r\n\r\n        /**\r\n         * Trigger focus on tag box's input\r\n         *\r\n         * @return $_obj The tag box's input\r\n         */\r\n        focusInput: function() {\r\n            // console.log( 'focusInput' );\r\n\r\n            return this.$type_zone.focus();\r\n        },\r\n\r\n        /**\r\n         * Get Data attributes custom options\r\n         *\r\n         * @return object  Tag-box data attributes options\r\n         */\r\n        getDataOptions: function() {\r\n\r\n            var key, data_option, data_options;\r\n\r\n            // Here we store all data_options\r\n            data_options = {};\r\n\r\n            // For each option\r\n            for ( key in this.defaults ) {\r\n\r\n                // Getting value\r\n                data_option = this.$elem.data( key );\r\n\r\n                // Checking if it is not undefined\r\n                if ( data_option /*!= null*/ ) {\r\n\r\n                    // Saving in data_options object\r\n                    data_options[ key ] = data_option;\r\n\r\n                }\r\n            }\r\n\r\n            return data_options;\r\n        },\r\n\r\n        /**\r\n         * Return all special keys inside an object (without distinction)\r\n         *\r\n         * @return obj\r\n         */\r\n        getSpecialKeys: function() {\r\n            return $.extend( {}, this.keys.add, this.keys.remove );\r\n        },\r\n\r\n        /**\r\n         * Return all special keys inside an object (with distinction)\r\n         *\r\n         * @return obj\r\n         */\r\n        getSpecialKeysD: function() {\r\n            return this.keys;\r\n        },\r\n\r\n        /**\r\n         * Return all tags as string\r\n         *\r\n         * @return array   All tags as member of strings.\r\n         */\r\n        getTags: function() {\r\n            // console.log( 'getTags' );\r\n\r\n            var all_txt_tags, i, l;\r\n\r\n            l = this.tags.length;\r\n            all_txt_tags = [];\r\n\r\n            for ( i = 0; i < l; i += 1 ) {\r\n                all_txt_tags.push( this.tags[ i ].pure_text );\r\n            }\r\n\r\n            return all_txt_tags;\r\n        },\r\n\r\n        /**\r\n         * Return all tags as object\r\n         *\r\n         * @return array   All tags as member of objects.\r\n         */\r\n        getTagsObj: function() {\r\n            // console.log( 'getTagsObj' );\r\n\r\n            return this.tags;\r\n        },\r\n\r\n        /**\r\n         * Init method to bootstrap all things\r\n         *\r\n         * @return $_obj   The jQuerify tag box\r\n         */\r\n        init: function() {\r\n            // console.log( 'init' );\r\n\r\n            var init_text, self, text;\r\n\r\n            self = this;\r\n\r\n            // Getting all data Parameters to fully customize the single tag box selecteds\r\n            self.config = $.extend( {}, self.defaults, self.options, self.getDataOptions() );\r\n\r\n            // Pre-existent text\r\n            init_text = self.$elem.text();\r\n\r\n            // Empty the original div\r\n            self.$elem.empty();\r\n\r\n            // Create the type_zone input using custom class and contenteditable attribute\r\n            self.$type_zone = $( document.createElement( \"input\" ) )\r\n                             .addClass( self.config[ \"type-zone-class\" ] )\r\n                             .attr( \"contenteditable\", true );\r\n\r\n            // Adding tagging class and appending the type zone\r\n            self.$elem\r\n                .addClass( self.config[ \"tag-box-class\" ] )\r\n                .append( self.$type_zone );\r\n\r\n            // Keydown event listener on tag box type_zone\r\n            self.$type_zone.keydown(function( e ) {\r\n                var key, index, l, pressed_key, all_keys,\r\n                    forbidden_chars, actual_text,\r\n                    callback_f, callback_t;\r\n\r\n                all_keys = self.getSpecialKeys();\r\n\r\n                // Forbidden Chars shortcut\r\n                forbidden_chars = self.config[ \"forbidden-chars\" ];\r\n\r\n                // Actual text in the type_zone\r\n                actual_text     = self.valInput();\r\n\r\n                // The pressed key\r\n                pressed_key     = e.which;\r\n\r\n                // console.log( pressed_key );\r\n\r\n                // For in loop to look to Remove Keys\r\n                if ( ! actual_text ) {\r\n\r\n                    for ( key in all_keys ) {\r\n\r\n                        // Some special key\r\n                        if ( pressed_key === all_keys[ key ] ) {\r\n\r\n                            // Enter or comma or spacebar - We cannot add an empty tag\r\n                            if ( self.keys.add[ key ] /*!= null*/ ) {\r\n\r\n                                // Prevent Default\r\n                                e.preventDefault();\r\n\r\n                                // Exit with 'true'\r\n                                return true;\r\n                            }\r\n\r\n                            // Backspace or Del\r\n                            if ( self.keys.remove[ key ] /*!= null*/ ) {\r\n\r\n                                // Checking if it enabled\r\n                                if ( ! self.config[ \"no-\" + key ] ) {\r\n\r\n                                    // Prevent Default\r\n                                    e.preventDefault();\r\n\r\n                                    return self.remove();\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n\r\n                    // For loop to remove Forbidden Chars from Text\r\n                    l = forbidden_chars.length;\r\n                    while ( l-- ) {\r\n\r\n                        // Looking for a forbidden char\r\n                        index = actual_text.indexOf( forbidden_chars[ l ] );\r\n\r\n                        // There is a forbidden text\r\n                        if ( index >= 0 ) {\r\n\r\n                            // Prevent Default\r\n                            e.preventDefault();\r\n\r\n                            // Removing Forbidden Char\r\n                            actual_text = actual_text.replace( forbidden_chars[ l ], \"\" );\r\n\r\n                            // Update type_zone text\r\n                            self.focusInput();\r\n                            self.valInput( actual_text );\r\n\r\n                            // Renaiming\r\n                            callback_f = self.config[ \"forbidden-chars-callback\" ];\r\n                            callback_t = self.config[ \"forbidden-chars-text\" ];\r\n\r\n                            // Remove the duplicate\r\n                            return self.throwError( callback_f, callback_t, forbidden_chars[ l ] );\r\n                        }\r\n                    }\r\n\r\n                    // For in to look in Add Keys\r\n                    for ( key in self.keys.add ) {\r\n\r\n                        // Enter or comma or spacebar if enabled\r\n                        if ( pressed_key === self.keys.add[ key ] ) {\r\n\r\n                            if ( ! self.config[ \"no-\" + key ] ) {\r\n\r\n                                // Prevent Default\r\n                                e.preventDefault();\r\n\r\n                                // Adding tag with no text\r\n                                return self.add();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Exit with success\r\n                return true;\r\n            });\r\n\r\n            // Add tag on a click away from the type_zone\r\n            if ( self.config[ \"tag-on-blur\" ] ) {\r\n                self.$type_zone.focusout(function() {\r\n\r\n                    // Get text from current input box\r\n                    text = self.valInput();\r\n\r\n                    // If text is empty, then continue focusout\r\n                    if ( ! text || ! text.length ) {\r\n                        return false;\r\n                    }\r\n\r\n                    // Otherwise add the tag first\r\n                    return self.add();\r\n                });\r\n            }\r\n\r\n            // On click, we focus the type_zone\r\n            self.$elem.on( \"click\", function() {\r\n                self.focusInput();\r\n            });\r\n\r\n            // Refresh tag box using refresh public method with a text\r\n            self.refresh( init_text );\r\n\r\n            // We don't break the chain, right?\r\n            return self;\r\n        },\r\n\r\n        /**\r\n         * Remove and insert all tag\r\n         *\r\n         * @param  string  text String with all tags (if null, simply we call getTags method)\r\n         * @return boolean\r\n         */\r\n        refresh: function( text ) {\r\n            // console.log( 'refresh' );\r\n\r\n            var self, separator;\r\n\r\n            self = this;\r\n            separator = self.config[ \"pre-tags-separator\" ];\r\n\r\n            text = text || self.getTags().join( separator );\r\n\r\n            self.reset();\r\n\r\n            // Adding text present on type_zone as tag on first call\r\n            $.each( text.split( separator ), function() {\r\n                self.add( this + \"\" );\r\n            });\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Remove last tag in tag box's type_zone or a specified one.\r\n         *\r\n         * @param  string|$_obj         The text of tag to remove or the $_obj of itself.\r\n         * @return string|$_obj         An error if the tag is not found, or the $_obj of removed tag.\r\n         */\r\n        remove: function( $tag ) {\r\n            // console.log( 'remove' );\r\n\r\n            var self, text, l;\r\n\r\n            self = this;\r\n\r\n            // If $tag is an array, call remove on each element\r\n            if ( $.isArray( $tag ) ) {\r\n                // Adding text present on type_zone as tag on first call\r\n                return $.each( $tag, function() {\r\n                    self.remove( this + \"\" );\r\n                });\r\n            }\r\n\r\n            // If $tag is a string, we must find the $_obj of the tag\r\n            if ( typeof $tag === \"string\" ) {\r\n\r\n                // Renaiming\r\n                text = $tag;\r\n\r\n                // Retrieving the $_obj of the tag\r\n                $tag = self.$elem.find( \"input[value=\" + text + \"]\" ).parent();\r\n\r\n                // If nothing is found, return an error\r\n                if ( ! $tag.length ) {\r\n                    return \"Error -> Tag not found\";\r\n                }\r\n            }\r\n\r\n            // Not specified any tags\r\n            if ( ! $tag ) {\r\n\r\n                // Retrieving the last\r\n                $tag = self.tags.pop();\r\n\r\n            } else {\r\n\r\n                // Iterate the tags array and removing the specified tags\r\n                l = self.tags.length;\r\n                while ( l-- ) {\r\n                    // Confront the content of $tag and the tags array\r\n                    if ( self.tags[ l ][0].innerHTML === $tag[0].innerHTML ) {\r\n                        // Removing definitively\r\n                        self.tags.splice( l, 1 );\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Getting text if not alredy setted\r\n            text = text || $tag.pure_text;\r\n\r\n            // Removing last tag\r\n            $tag.remove();\r\n\r\n            // If you want to change the text when a tag is deleted\r\n            if ( self.config[ \"edit-on-delete\" ] ) {\r\n\r\n                // Empting input\r\n                self.emptyInput();\r\n\r\n                // Set the new text\r\n                self.valInput( $tag.pure_text );\r\n            }\r\n\r\n            return $tag;\r\n\r\n        },\r\n\r\n        /**\r\n         * Alias of reset\r\n         *\r\n         * @return array  All removed tags\r\n         */\r\n        removeAll: function() {\r\n            // console.log( 'removeAll' );\r\n\r\n            return this.reset();\r\n        },\r\n\r\n        /**\r\n         * Remove a special keys\r\n         *\r\n         * @param  array  arr  Array like ['type', key_code], where 'type' is 'add' or 'remove', key_code is the key number\r\n         * @return obj         Actually 'type'_key (add_key or remove_key).\r\n         */\r\n        removeSpecialKeys: function( arr ) {\r\n            // console.log( 'removeSpecialKeys' );\r\n\r\n            var self, value, to_add, key_code, type;\r\n\r\n            self     = this;\r\n            type     = arr[0];\r\n            key_code = arr[1];\r\n            to_add   = {};\r\n\r\n            // If key_code is an array, call removeSpecialKeys on each element\r\n            if ( $.isArray( key_code ) ) {\r\n                return $.each( key_code, function() {\r\n                    self.removeSpecialKeys( [ type, this ] );\r\n                });\r\n            }\r\n\r\n            // Iterate proper array\r\n            for ( value in self.keys[ type ] ) {\r\n                if ( self.keys[ type ].hasOwnProperty( value ) ) {\r\n\r\n                    // If the key_code is equal to the actual key_code\r\n                    if ( self.keys[ type ][ value ] === key_code ) {\r\n                        // We set to undefined the property\r\n                        self.keys[ type ][ value ] = undefined;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return self.keys[ type ];\r\n        },\r\n\r\n        /**\r\n         * Remove all tags from tag box's type_zone\r\n         *\r\n         * @return array  All removed tags\r\n         */\r\n        reset: function() {\r\n            // console.log( 'reset' );\r\n\r\n            while (this.tags.length ) {\r\n                this.remove( this.tags[ this.tags.length ] );\r\n            }\r\n\r\n            this.emptyInput();\r\n\r\n            return this.tags;\r\n\r\n        },\r\n\r\n        /**\r\n         * Raise a callback with some text\r\n         *\r\n         * @param  function callback_f Callback function\r\n         * @param  string   callback_t Basic text\r\n         * @param  string   tag_text   Tag text\r\n         * @return function\r\n         */\r\n        throwError: function( callback_f, callback_t, tag_text ) {\r\n            // Calling the callback with t as th\r\n            return callback_f( [ callback_t + \" '\" + tag_text + \"'.\" ] );\r\n        },\r\n\r\n        /**\r\n         * Get or Set the tag box type_zone's value\r\n         *\r\n         * @param  string        text String to put as tag box type_zone's value\r\n         * @return string|$_obj       The value of tag box's type_zone or the type_zone itself\r\n         */\r\n        valInput: function( text ) {\r\n            // console.log( 'valInput' );\r\n\r\n            if ( text == null ) {\r\n                return this.$type_zone.val();\r\n            }\r\n\r\n            return this.$type_zone.val( text );\r\n\r\n        },\r\n\r\n    };\r\n\r\n    /**\r\n     * Registering taggingJS\r\n     *\r\n     * @param  obj|string arg1 Object with custom options or string with a method\r\n     * @param  string     arg2 Argument to pass to the method\r\n     * @return $_Obj           All tag-box or result from \"arg2\" public method.\r\n     */\r\n    $.fn.tagging = function( arg1, arg2 ) {\r\n        var results = [];\r\n\r\n        this.each(function() {\r\n            var $this, tagging, val;\r\n\r\n            $this   = $( this );\r\n            tagging = $this.data( \"tag-box\" );\r\n\r\n            // Initialize a new tags input\r\n            if ( ! tagging ) {\r\n\r\n                tagging = new Tagging( this, arg1 );\r\n\r\n                $this.data( \"tag-box\", tagging );\r\n\r\n                tagging.init();\r\n\r\n                results.push( tagging.$elem );\r\n\r\n            } else {\r\n\r\n                // Invoke function on existing tags input\r\n                val = tagging[ arg1 ]( arg2 );\r\n\r\n                if ( val /*!= null*/ ) {\r\n                    results.push( val );\r\n                }\r\n            }\r\n        });\r\n\r\n        if ( typeof arg1 === \"string\") {\r\n            // Return the results from the invoked function calls\r\n            return ( results.length > 1 ) ? results : results[0];\r\n        }\r\n\r\n        return results;\r\n    };\r\n\r\n})( window.jQuery, window, document );\r\n\r\n// jQuery on Ready example\r\n// (function( $, window, document, undefined ) {\r\n//     $( document ).ready(function() {\r\n//         var t = $( \".tagging-js\" ).tagging();\r\n//         t[0].addClass( \"form-control\" );\r\n//         // console.log( t[0] );\r\n//     });\r\n// })( window.jQuery, window, document );\r\n"],"sourceRoot":"/source/"}