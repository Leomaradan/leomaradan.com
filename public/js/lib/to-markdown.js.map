{"version":3,"sources":["to-markdown.js"],"names":[],"mappingsfile":"to-markdown.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.toMarkdown = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n/*\r\n * to-markdown - an HTML to Markdown converter\r\n *\r\n * Copyright 2011+, Dom Christie\r\n * Licenced under the MIT licence\r\n *\r\n */\r\n\r\n'use strict'\r\n\r\nvar toMarkdown\r\nvar converters\r\nvar mdConverters = require('./lib/md-converters')\r\nvar gfmConverters = require('./lib/gfm-converters')\r\nvar HtmlParser = require('./lib/html-parser')\r\nvar collapse = require('collapse-whitespace')\r\n\r\n/*\r\n * Utilities\r\n */\r\n\r\nvar blocks = ['address', 'article', 'aside', 'audio', 'blockquote', 'body',\r\n  'canvas', 'center', 'dd', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption',\r\n  'figure', 'footer', 'form', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\r\n  'header', 'hgroup', 'hr', 'html', 'isindex', 'li', 'main', 'menu', 'nav',\r\n  'noframes', 'noscript', 'ol', 'output', 'p', 'pre', 'section', 'table',\r\n  'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul'\r\n]\r\n\r\nfunction isBlock (node) {\r\n  return blocks.indexOf(node.nodeName.toLowerCase()) !== -1\r\n}\r\n\r\nvar voids = [\r\n  'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input',\r\n  'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'\r\n]\r\n\r\nfunction isVoid (node) {\r\n  return voids.indexOf(node.nodeName.toLowerCase()) !== -1\r\n}\r\n\r\nfunction htmlToDom (string) {\r\n  var tree = new HtmlParser().parseFromString(string, 'text/html')\r\n  collapse(tree.documentElement, isBlock)\r\n  return tree\r\n}\r\n\r\n/*\r\n * Flattens DOM tree into single array\r\n */\r\n\r\nfunction bfsOrder (node) {\r\n  var inqueue = [node]\r\n  var outqueue = []\r\n  var elem\r\n  var children\r\n  var i\r\n\r\n  while (inqueue.length > 0) {\r\n    elem = inqueue.shift()\r\n    outqueue.push(elem)\r\n    children = elem.childNodes\r\n    for (i = 0; i < children.length; i++) {\r\n      if (children[i].nodeType === 1) inqueue.push(children[i])\r\n    }\r\n  }\r\n  outqueue.shift()\r\n  return outqueue\r\n}\r\n\r\n/*\r\n * Contructs a Markdown string of replacement text for a given node\r\n */\r\n\r\nfunction getContent (node) {\r\n  var text = ''\r\n  for (var i = 0; i < node.childNodes.length; i++) {\r\n    if (node.childNodes[i].nodeType === 1) {\r\n      text += node.childNodes[i]._replacement\r\n    } else if (node.childNodes[i].nodeType === 3) {\r\n      text += node.childNodes[i].data\r\n    } else continue\r\n  }\r\n  return text\r\n}\r\n\r\n/*\r\n * Returns the HTML string of an element with its contents converted\r\n */\r\n\r\nfunction outer (node, content) {\r\n  return node.cloneNode(false).outerHTML.replace('><', '>' + content + '<')\r\n}\r\n\r\nfunction canConvert (node, filter) {\r\n  if (typeof filter === 'string') {\r\n    return filter === node.nodeName.toLowerCase()\r\n  }\r\n  if (Array.isArray(filter)) {\r\n    return filter.indexOf(node.nodeName.toLowerCase()) !== -1\r\n  } else if (typeof filter === 'function') {\r\n    return filter.call(toMarkdown, node)\r\n  } else {\r\n    throw new TypeError('`filter` needs to be a string, array, or function')\r\n  }\r\n}\r\n\r\nfunction isFlankedByWhitespace (side, node) {\r\n  var sibling\r\n  var regExp\r\n  var isFlanked\r\n\r\n  if (side === 'left') {\r\n    sibling = node.previousSibling\r\n    regExp = / $/\r\n  } else {\r\n    sibling = node.nextSibling\r\n    regExp = /^ /\r\n  }\r\n\r\n  if (sibling) {\r\n    if (sibling.nodeType === 3) {\r\n      isFlanked = regExp.test(sibling.nodeValue)\r\n    } else if (sibling.nodeType === 1 && !isBlock(sibling)) {\r\n      isFlanked = regExp.test(sibling.textContent)\r\n    }\r\n  }\r\n  return isFlanked\r\n}\r\n\r\nfunction flankingWhitespace (node) {\r\n  var leading = ''\r\n  var trailing = ''\r\n\r\n  if (!isBlock(node)) {\r\n    var hasLeading = /^[ \\r\\n\\t]/.test(node.innerHTML)\r\n    var hasTrailing = /[ \\r\\n\\t]$/.test(node.innerHTML)\r\n\r\n    if (hasLeading && !isFlankedByWhitespace('left', node)) {\r\n      leading = ' '\r\n    }\r\n    if (hasTrailing && !isFlankedByWhitespace('right', node)) {\r\n      trailing = ' '\r\n    }\r\n  }\r\n\r\n  return { leading: leading, trailing: trailing }\r\n}\r\n\r\n/*\r\n * Finds a Markdown converter, gets the replacement, and sets it on\r\n * `_replacement`\r\n */\r\n\r\nfunction process (node) {\r\n  var replacement\r\n  var content = getContent(node)\r\n\r\n  // Remove blank nodes\r\n  if (!isVoid(node) && !/A|TH|TD/.test(node.nodeName) && /^\\s*$/i.test(content)) {\r\n    node._replacement = ''\r\n    return\r\n  }\r\n\r\n  for (var i = 0; i < converters.length; i++) {\r\n    var converter = converters[i]\r\n\r\n    if (canConvert(node, converter.filter)) {\r\n      if (typeof converter.replacement !== 'function') {\r\n        throw new TypeError(\r\n          '`replacement` needs to be a function that returns a string'\r\n        )\r\n      }\r\n\r\n      var whitespace = flankingWhitespace(node)\r\n\r\n      if (whitespace.leading || whitespace.trailing) {\r\n        content = content.trim()\r\n      }\r\n      replacement = whitespace.leading +\r\n        converter.replacement.call(toMarkdown, content, node) +\r\n        whitespace.trailing\r\n      break\r\n    }\r\n  }\r\n\r\n  node._replacement = replacement\r\n}\r\n\r\ntoMarkdown = function (input, options) {\r\n  options = options || {}\r\n\r\n  if (typeof input !== 'string') {\r\n    throw new TypeError(input + ' is not a string')\r\n  }\r\n\r\n  // Escape potential ol triggers\r\n  input = input.replace(/(\\d+)\\. /g, '$1\\\\. ')\r\n\r\n  var clone = htmlToDom(input).body\r\n  var nodes = bfsOrder(clone)\r\n  var output\r\n\r\n  converters = mdConverters.slice(0)\r\n  if (options.gfm) {\r\n    converters = gfmConverters.concat(converters)\r\n  }\r\n\r\n  if (options.converters) {\r\n    converters = options.converters.concat(converters)\r\n  }\r\n\r\n  // Process through nodes in reverse (so deepest child elements are first).\r\n  for (var i = nodes.length - 1; i >= 0; i--) {\r\n    process(nodes[i])\r\n  }\r\n  output = getContent(clone)\r\n\r\n  return output.replace(/^[\\t\\r\\n]+|[\\t\\r\\n\\s]+$/g, '')\r\n    .replace(/\\n\\s+\\n/g, '\\n\\n')\r\n    .replace(/\\n{3,}/g, '\\n\\n')\r\n}\r\n\r\ntoMarkdown.isBlock = isBlock\r\ntoMarkdown.isVoid = isVoid\r\ntoMarkdown.outer = outer\r\n\r\nmodule.exports = toMarkdown\r\n\r\n},{\"./lib/gfm-converters\":2,\"./lib/html-parser\":3,\"./lib/md-converters\":4,\"collapse-whitespace\":7}],2:[function(require,module,exports){\r\n'use strict'\r\n\r\nfunction cell (content, node) {\r\n  var index = Array.prototype.indexOf.call(node.parentNode.childNodes, node)\r\n  var prefix = ' '\r\n  if (index === 0) prefix = '| '\r\n  return prefix + content + ' |'\r\n}\r\n\r\nvar highlightRegEx = /highlight highlight-(\\S+)/\r\n\r\nmodule.exports = [\r\n  {\r\n    filter: 'br',\r\n    replacement: function () {\r\n      return '\\n'\r\n    }\r\n  },\r\n  {\r\n    filter: ['del', 's', 'strike'],\r\n    replacement: function (content) {\r\n      return '~~' + content + '~~'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: function (node) {\r\n      return node.type === 'checkbox' && node.parentNode.nodeName === 'LI'\r\n    },\r\n    replacement: function (content, node) {\r\n      return (node.checked ? '[x]' : '[ ]') + ' '\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: ['th', 'td'],\r\n    replacement: function (content, node) {\r\n      return cell(content, node)\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: 'tr',\r\n    replacement: function (content, node) {\r\n      var borderCells = ''\r\n      var alignMap = { left: ':--', right: '--:', center: ':-:' }\r\n\r\n      if (node.parentNode.nodeName === 'THEAD') {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n          var align = node.childNodes[i].attributes.align\r\n          var border = '---'\r\n\r\n          if (align) border = alignMap[align.value] || border\r\n\r\n          borderCells += cell(border, node.childNodes[i])\r\n        }\r\n      }\r\n      return '\\n' + content + (borderCells ? '\\n' + borderCells : '')\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: 'table',\r\n    replacement: function (content) {\r\n      return '\\n\\n' + content + '\\n\\n'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: ['thead', 'tbody', 'tfoot'],\r\n    replacement: function (content) {\r\n      return content\r\n    }\r\n  },\r\n\r\n  // Fenced code blocks\r\n  {\r\n    filter: function (node) {\r\n      return node.nodeName === 'PRE' &&\r\n      node.firstChild &&\r\n      node.firstChild.nodeName === 'CODE'\r\n    },\r\n    replacement: function (content, node) {\r\n      return '\\n\\n```\\n' + node.firstChild.textContent + '\\n```\\n\\n'\r\n    }\r\n  },\r\n\r\n  // Syntax-highlighted code blocks\r\n  {\r\n    filter: function (node) {\r\n      return node.nodeName === 'PRE' &&\r\n      node.parentNode.nodeName === 'DIV' &&\r\n      highlightRegEx.test(node.parentNode.className)\r\n    },\r\n    replacement: function (content, node) {\r\n      var language = node.parentNode.className.match(highlightRegEx)[1]\r\n      return '\\n\\n```' + language + '\\n' + node.textContent + '\\n```\\n\\n'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: function (node) {\r\n      return node.nodeName === 'DIV' &&\r\n      highlightRegEx.test(node.className)\r\n    },\r\n    replacement: function (content) {\r\n      return '\\n\\n' + content + '\\n\\n'\r\n    }\r\n  }\r\n]\r\n\r\n},{}],3:[function(require,module,exports){\r\n/*\r\n * Set up window for Node.js\r\n */\r\n\r\nvar _window = (typeof window !== 'undefined' ? window : this)\r\n\r\n/*\r\n * Parsing HTML strings\r\n */\r\n\r\nfunction canParseHtmlNatively () {\r\n  var Parser = _window.DOMParser\r\n  var canParse = false\r\n\r\n  // Adapted from https://gist.github.com/1129031\r\n  // Firefox/Opera/IE throw errors on unsupported types\r\n  try {\r\n    // WebKit returns null on unsupported types\r\n    if (new Parser().parseFromString('', 'text/html')) {\r\n      canParse = true\r\n    }\r\n  } catch (e) {}\r\n\r\n  return canParse\r\n}\r\n\r\nfunction createHtmlParser () {\r\n  var Parser = function () {}\r\n\r\n  // For Node.js environments\r\n  if (typeof document === 'undefined') {\r\n    var jsdom = require('jsdom')\r\n    Parser.prototype.parseFromString = function (string) {\r\n      return jsdom.jsdom(string, {\r\n        features: {\r\n          FetchExternalResources: [],\r\n          ProcessExternalResources: false\r\n        }\r\n      })\r\n    }\r\n  } else {\r\n    if (!shouldUseActiveX()) {\r\n      Parser.prototype.parseFromString = function (string) {\r\n        var doc = document.implementation.createHTMLDocument('')\r\n        doc.open()\r\n        doc.write(string)\r\n        doc.close()\r\n        return doc\r\n      }\r\n    } else {\r\n      Parser.prototype.parseFromString = function (string) {\r\n        var doc = new window.ActiveXObject('htmlfile')\r\n        doc.designMode = 'on' // disable on-page scripts\r\n        doc.open()\r\n        doc.write(string)\r\n        doc.close()\r\n        return doc\r\n      }\r\n    }\r\n  }\r\n  return Parser\r\n}\r\n\r\nfunction shouldUseActiveX () {\r\n  var useActiveX = false\r\n\r\n  try {\r\n    document.implementation.createHTMLDocument('').open()\r\n  } catch (e) {\r\n    if (window.ActiveXObject) useActiveX = true\r\n  }\r\n\r\n  return useActiveX\r\n}\r\n\r\nmodule.exports = canParseHtmlNatively() ? _window.DOMParser : createHtmlParser()\r\n\r\n},{\"jsdom\":6}],4:[function(require,module,exports){\r\n'use strict'\r\n\r\nmodule.exports = [\r\n  {\r\n    filter: 'p',\r\n    replacement: function (content) {\r\n      return '\\n\\n' + content + '\\n\\n'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: 'br',\r\n    replacement: function () {\r\n      return '  \\n'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\r\n    replacement: function (content, node) {\r\n      var hLevel = node.nodeName.charAt(1)\r\n      var hPrefix = ''\r\n      for (var i = 0; i < hLevel; i++) {\r\n        hPrefix += '#'\r\n      }\r\n      return '\\n\\n' + hPrefix + ' ' + content + '\\n\\n'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: 'hr',\r\n    replacement: function () {\r\n      return '\\n\\n* * *\\n\\n'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: ['em', 'i'],\r\n    replacement: function (content) {\r\n      return '_' + content + '_'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: ['strong', 'b'],\r\n    replacement: function (content) {\r\n      return '**' + content + '**'\r\n    }\r\n  },\r\n\r\n  // Inline code\r\n  {\r\n    filter: function (node) {\r\n      var hasSiblings = node.previousSibling || node.nextSibling\r\n      var isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings\r\n\r\n      return node.nodeName === 'CODE' && !isCodeBlock\r\n    },\r\n    replacement: function (content) {\r\n      return '`' + content + '`'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: function (node) {\r\n      return node.nodeName === 'A' && node.getAttribute('href')\r\n    },\r\n    replacement: function (content, node) {\r\n      var titlePart = node.title ? ' \"' + node.title + '\"' : ''\r\n      return '[' + content + '](' + node.getAttribute('href') + titlePart + ')'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: 'img',\r\n    replacement: function (content, node) {\r\n      var alt = node.alt || ''\r\n      var src = node.getAttribute('src') || ''\r\n      var title = node.title || ''\r\n      var titlePart = title ? ' \"' + title + '\"' : ''\r\n      return src ? '![' + alt + ']' + '(' + src + titlePart + ')' : ''\r\n    }\r\n  },\r\n\r\n  // Code blocks\r\n  {\r\n    filter: function (node) {\r\n      return node.nodeName === 'PRE' && node.firstChild.nodeName === 'CODE'\r\n    },\r\n    replacement: function (content, node) {\r\n      return '\\n\\n    ' + node.firstChild.textContent.replace(/\\n/g, '\\n    ') + '\\n\\n'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: 'blockquote',\r\n    replacement: function (content) {\r\n      content = content.trim()\r\n      content = content.replace(/\\n{3,}/g, '\\n\\n')\r\n      content = content.replace(/^/gm, '> ')\r\n      return '\\n\\n' + content + '\\n\\n'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: 'li',\r\n    replacement: function (content, node) {\r\n      content = content.replace(/^\\s+/, '').replace(/\\n/gm, '\\n    ')\r\n      var prefix = '*   '\r\n      var parent = node.parentNode\r\n      var index = Array.prototype.indexOf.call(parent.children, node) + 1\r\n\r\n      prefix = /ol/i.test(parent.nodeName) ? index + '.  ' : '*   '\r\n      return prefix + content\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: ['ul', 'ol'],\r\n    replacement: function (content, node) {\r\n      var strings = []\r\n      for (var i = 0; i < node.childNodes.length; i++) {\r\n        strings.push(node.childNodes[i]._replacement)\r\n      }\r\n\r\n      if (/li/i.test(node.parentNode.nodeName)) {\r\n        return '\\n' + strings.join('\\n')\r\n      }\r\n      return '\\n\\n' + strings.join('\\n') + '\\n\\n'\r\n    }\r\n  },\r\n\r\n  {\r\n    filter: function (node) {\r\n      return this.isBlock(node)\r\n    },\r\n    replacement: function (content, node) {\r\n      return '\\n\\n' + this.outer(node, content) + '\\n\\n'\r\n    }\r\n  },\r\n\r\n  // Anything else!\r\n  {\r\n    filter: function () {\r\n      return true\r\n    },\r\n    replacement: function (content, node) {\r\n      return this.outer(node, content)\r\n    }\r\n  }\r\n]\r\n\r\n},{}],5:[function(require,module,exports){\r\n/**\r\n * This file automatically generated from `build.js`.\r\n * Do not manually edit.\r\n */\r\n\r\nmodule.exports = [\r\n  \"address\",\r\n  \"article\",\r\n  \"aside\",\r\n  \"audio\",\r\n  \"blockquote\",\r\n  \"canvas\",\r\n  \"dd\",\r\n  \"div\",\r\n  \"dl\",\r\n  \"fieldset\",\r\n  \"figcaption\",\r\n  \"figure\",\r\n  \"footer\",\r\n  \"form\",\r\n  \"h1\",\r\n  \"h2\",\r\n  \"h3\",\r\n  \"h4\",\r\n  \"h5\",\r\n  \"h6\",\r\n  \"header\",\r\n  \"hgroup\",\r\n  \"hr\",\r\n  \"main\",\r\n  \"nav\",\r\n  \"noscript\",\r\n  \"ol\",\r\n  \"output\",\r\n  \"p\",\r\n  \"pre\",\r\n  \"section\",\r\n  \"table\",\r\n  \"tfoot\",\r\n  \"ul\",\r\n  \"video\"\r\n];\r\n\r\n},{}],6:[function(require,module,exports){\r\n\r\n},{}],7:[function(require,module,exports){\r\n'use strict';\r\n\r\nvar voidElements = require('void-elements');\r\nObject.keys(voidElements).forEach(function (name) {\r\n  voidElements[name.toUpperCase()] = 1;\r\n});\r\n\r\nvar blockElements = {};\r\nrequire('block-elements').forEach(function (name) {\r\n  blockElements[name.toUpperCase()] = 1;\r\n});\r\n\r\n/**\r\n * isBlockElem(node) determines if the given node is a block element.\r\n *\r\n * @param {Node} node\r\n * @return {Boolean}\r\n */\r\nfunction isBlockElem(node) {\r\n  return !!(node && blockElements[node.nodeName]);\r\n}\r\n\r\n/**\r\n * isVoid(node) determines if the given node is a void element.\r\n *\r\n * @param {Node} node\r\n * @return {Boolean}\r\n */\r\nfunction isVoid(node) {\r\n  return !!(node && voidElements[node.nodeName]);\r\n}\r\n\r\n/**\r\n * whitespace(elem [, isBlock]) removes extraneous whitespace from an\r\n * the given element. The function isBlock may optionally be passed in\r\n * to determine whether or not an element is a block element; if none\r\n * is provided, defaults to using the list of block elements provided\r\n * by the `block-elements` module.\r\n *\r\n * @param {Node} elem\r\n * @param {Function} blockTest\r\n */\r\nfunction collapseWhitespace(elem, isBlock) {\r\n  if (!elem.firstChild || elem.nodeName === 'PRE') return;\r\n\r\n  if (typeof isBlock !== 'function') {\r\n    isBlock = isBlockElem;\r\n  }\r\n\r\n  var prevText = null;\r\n  var prevVoid = false;\r\n\r\n  var prev = null;\r\n  var node = next(prev, elem);\r\n\r\n  while (node !== elem) {\r\n    if (node.nodeType === 3) {\r\n      // Node.TEXT_NODE\r\n      var text = node.data.replace(/[ \\r\\n\\t]+/g, ' ');\r\n\r\n      if ((!prevText || / $/.test(prevText.data)) && !prevVoid && text[0] === ' ') {\r\n        text = text.substr(1);\r\n      }\r\n\r\n      // `text` might be empty at this point.\r\n      if (!text) {\r\n        node = remove(node);\r\n        continue;\r\n      }\r\n\r\n      node.data = text;\r\n      prevText = node;\r\n    } else if (node.nodeType === 1) {\r\n      // Node.ELEMENT_NODE\r\n      if (isBlock(node) || node.nodeName === 'BR') {\r\n        if (prevText) {\r\n          prevText.data = prevText.data.replace(/ $/, '');\r\n        }\r\n\r\n        prevText = null;\r\n        prevVoid = false;\r\n      } else if (isVoid(node)) {\r\n        // Avoid trimming space around non-block, non-BR void elements.\r\n        prevText = null;\r\n        prevVoid = true;\r\n      }\r\n    } else {\r\n      node = remove(node);\r\n      continue;\r\n    }\r\n\r\n    var nextNode = next(prev, node);\r\n    prev = node;\r\n    node = nextNode;\r\n  }\r\n\r\n  if (prevText) {\r\n    prevText.data = prevText.data.replace(/ $/, '');\r\n    if (!prevText.data) {\r\n      remove(prevText);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * remove(node) removes the given node from the DOM and returns the\r\n * next node in the sequence.\r\n *\r\n * @param {Node} node\r\n * @return {Node} node\r\n */\r\nfunction remove(node) {\r\n  var next = node.nextSibling || node.parentNode;\r\n\r\n  node.parentNode.removeChild(node);\r\n\r\n  return next;\r\n}\r\n\r\n/**\r\n * next(prev, current) returns the next node in the sequence, given the\r\n * current and previous nodes.\r\n *\r\n * @param {Node} prev\r\n * @param {Node} current\r\n * @return {Node}\r\n */\r\nfunction next(prev, current) {\r\n  if (prev && prev.parentNode === current || current.nodeName === 'PRE') {\r\n    return current.nextSibling || current.parentNode;\r\n  }\r\n\r\n  return current.firstChild || current.nextSibling || current.parentNode;\r\n}\r\n\r\nmodule.exports = collapseWhitespace;\r\n\r\n},{\"block-elements\":5,\"void-elements\":8}],8:[function(require,module,exports){\r\n/**\r\n * This file automatically generated from `pre-publish.js`.\r\n * Do not manually edit.\r\n */\r\n\r\nmodule.exports = {\r\n  \"area\": true,\r\n  \"base\": true,\r\n  \"br\": true,\r\n  \"col\": true,\r\n  \"embed\": true,\r\n  \"hr\": true,\r\n  \"img\": true,\r\n  \"input\": true,\r\n  \"keygen\": true,\r\n  \"link\": true,\r\n  \"menuitem\": true,\r\n  \"meta\": true,\r\n  \"param\": true,\r\n  \"source\": true,\r\n  \"track\": true,\r\n  \"wbr\": true\r\n};\r\n\r\n},{}]},{},[1])(1)\r\n});"],"sourceRoot":"/source/"}